#[inline(always)]
unsafe fn cast<const N: usize, T>(x: &[T]) -> &[T; N] {
    &*(x as *const [T] as *const [T; N])
}

#[inline(always)]
unsafe fn cast_mut<const N: usize, T>(x: &mut [T]) -> &mut [T; N] {
    &mut *(x as *mut [T] as *mut [T; N])
}

fn transpose8x8(inm: &[f32; 64], outm: &mut [f32; 64]) {
    for i in 0..8 {
        for j in 0..8 {
            outm[j * 8 + i] = inm[i * 8 + j];
        }
    }
}

const COS_TABLE: [f32; 64] = [
    0.707106781186547524400844362105,
    0.980785280403230449126182236134,
    0.923879532511286756128183189397,
    0.831469612302545237078788377618,
    0.707106781186547524400844362105,
    0.555570233019602224742830813949,
    0.382683432365089771728459984030,
    0.195090322016128267848284868477,
    0.707106781186547524400844362105,
    0.831469612302545237078788377618,
    0.382683432365089771728459984030,
    -0.195090322016128267848284868477,
    -0.707106781186547524400844362105,
    -0.980785280403230449126182236134,
    -0.923879532511286756128183189397,
    -0.555570233019602224742830813949,
    0.707106781186547524400844362105,
    0.555570233019602224742830813949,
    -0.382683432365089771728459984030,
    -0.980785280403230449126182236134,
    -0.707106781186547524400844362105,
    0.195090322016128267848284868477,
    0.923879532511286756128183189397,
    0.831469612302545237078788377618,
    0.707106781186547524400844362105,
    0.195090322016128267848284868477,
    -0.923879532511286756128183189397,
    -0.555570233019602224742830813949,
    0.707106781186547524400844362105,
    0.831469612302545237078788377618,
    -0.382683432365089771728459984030,
    -0.980785280403230449126182236134,
    0.707106781186547524400844362105,
    -0.195090322016128267848284868477,
    -0.923879532511286756128183189397,
    0.555570233019602224742830813949,
    0.707106781186547524400844362105,
    -0.831469612302545237078788377618,
    -0.382683432365089771728459984030,
    0.980785280403230449126182236134,
    0.707106781186547524400844362105,
    -0.555570233019602224742830813949,
    -0.382683432365089771728459984030,
    0.980785280403230449126182236134,
    -0.707106781186547524400844362105,
    -0.195090322016128267848284868477,
    0.923879532511286756128183189397,
    -0.831469612302545237078788377618,
    0.707106781186547524400844362105,
    -0.831469612302545237078788377618,
    0.382683432365089771728459984030,
    0.195090322016128267848284868477,
    -0.707106781186547524400844362105,
    0.980785280403230449126182236134,
    -0.923879532511286756128183189397,
    0.555570233019602224742830813949,
    0.707106781186547524400844362105,
    -0.980785280403230449126182236134,
    0.923879532511286756128183189397,
    -0.831469612302545237078788377618,
    0.707106781186547524400844362105,
    -0.555570233019602224742830813949,
    0.382683432365089771728459984030,
    -0.195090322016128267848284868477,
];

#[inline(always)]
fn idct_1d(m_in: &[f32; 8], m_out: &mut [f32; 8]) {
    for n in 0..8 {
        let mut sum = 0.;
        for k in 0..8 {
            // TODO: do not always use mul_add,
            // since this generates calls to an fma *function* if fma
            // as an instruction is not available for the target.

            sum = f32::mul_add(m_in[k], COS_TABLE[8 * n + k], sum);
        }
        m_out[n] = sum * 0.5;
    }
}

pub fn idct(m_in: &[f32; 64], m_out: &mut [f32; 64]) {
    unsafe {
        let mut transposed = [0.; 64];
        transpose8x8(m_in, &mut transposed);

        for i in 0..8 {
            idct_1d(
                cast(&transposed[8 * i..][..8]),
                cast_mut(&mut m_out[8 * i..][..8]),
            );
        }

        transpose8x8(m_out, &mut transposed);

        for i in 0..8 {
            idct_1d(
                cast(&transposed[8 * i..][..8]),
                cast_mut(&mut m_out[8 * i..][..8]),
            );
        }

        // TODO just curious if doing the transpose here
        // also works (and removing the first transpose)
    }
}
