#[inline(always)]
unsafe fn cast<const N: usize, T>(x: &[T]) -> &[T; N] {
    &*(x as *const [T] as *const [T; N])
}

#[inline(always)]
unsafe fn cast_mut<const N: usize, T>(x: &mut [T]) -> &mut [T; N] {
    &mut *(x as *mut [T] as *mut [T; N])
}

fn transpose8x8(inm: &[f64; 64], outm: &mut [f64; 64]) {
    for i in 0..8 {
        for j in 0..8 {
            outm[j * 8 + i] = inm[i * 8 + j];
        }
    }
}

#[inline(always)]
fn cos_table(n: usize, k: usize) -> f64 {
    match (n, k) {
        (0, 0) => 1.00000000000000000000000000000,
        (0, 1) => 0.980785280403230449126182236134,
        (0, 2) => 0.923879532511286756128183189397,
        (0, 3) => 0.831469612302545237078788377618,
        (0, 4) => 0.707106781186547524400844362105,
        (0, 5) => 0.555570233019602224742830813949,
        (0, 6) => 0.382683432365089771728459984030,
        (0, 7) => 0.195090322016128267848284868477,
        (1, 0) => 1.00000000000000000000000000000,
        (1, 1) => 0.831469612302545237078788377618,
        (1, 2) => 0.382683432365089771728459984030,
        (1, 3) => -0.195090322016128267848284868477,
        (1, 4) => -0.707106781186547524400844362105,
        (1, 5) => -0.980785280403230449126182236134,
        (1, 6) => -0.923879532511286756128183189397,
        (1, 7) => -0.555570233019602224742830813949,
        (2, 0) => 1.00000000000000000000000000000,
        (2, 1) => 0.555570233019602224742830813949,
        (2, 2) => -0.382683432365089771728459984030,
        (2, 3) => -0.980785280403230449126182236134,
        (2, 4) => -0.707106781186547524400844362105,
        (2, 5) => 0.195090322016128267848284868477,
        (2, 6) => 0.923879532511286756128183189397,
        (2, 7) => 0.831469612302545237078788377618,
        (3, 0) => 1.00000000000000000000000000000,
        (3, 1) => 0.195090322016128267848284868477,
        (3, 2) => -0.923879532511286756128183189397,
        (3, 3) => -0.555570233019602224742830813949,
        (3, 4) => 0.707106781186547524400844362105,
        (3, 5) => 0.831469612302545237078788377618,
        (3, 6) => -0.382683432365089771728459984030,
        (3, 7) => -0.980785280403230449126182236134,
        (4, 0) => 1.00000000000000000000000000000,
        (4, 1) => -0.195090322016128267848284868477,
        (4, 2) => -0.923879532511286756128183189397,
        (4, 3) => 0.555570233019602224742830813949,
        (4, 4) => 0.707106781186547524400844362105,
        (4, 5) => -0.831469612302545237078788377618,
        (4, 6) => -0.382683432365089771728459984030,
        (4, 7) => 0.980785280403230449126182236134,
        (5, 0) => 1.00000000000000000000000000000,
        (5, 1) => -0.555570233019602224742830813949,
        (5, 2) => -0.382683432365089771728459984030,
        (5, 3) => 0.980785280403230449126182236134,
        (5, 4) => -0.707106781186547524400844362105,
        (5, 5) => -0.195090322016128267848284868477,
        (5, 6) => 0.923879532511286756128183189397,
        (5, 7) => -0.831469612302545237078788377618,
        (6, 0) => 1.00000000000000000000000000000,
        (6, 1) => -0.831469612302545237078788377618,
        (6, 2) => 0.382683432365089771728459984030,
        (6, 3) => 0.195090322016128267848284868477,
        (6, 4) => -0.707106781186547524400844362105,
        (6, 5) => 0.980785280403230449126182236134,
        (6, 6) => -0.923879532511286756128183189397,
        (6, 7) => 0.555570233019602224742830813949,
        (7, 0) => 1.00000000000000000000000000000,
        (7, 1) => -0.980785280403230449126182236134,
        (7, 2) => 0.923879532511286756128183189397,
        (7, 3) => -0.831469612302545237078788377618,
        (7, 4) => 0.707106781186547524400844362105,
        (7, 5) => -0.555570233019602224742830813949,
        (7, 6) => 0.382683432365089771728459984030,
        (7, 7) => -0.195090322016128267848284868477,
        _ => unsafe { std::hint::unreachable_unchecked() },
    }
}

#[inline(always)]
fn idct_1d(m_in: &[f64; 8], m_out: &mut [f64; 8]) {
    const SQRT2_O2: f64 = 0.707106781186547524400844362105;

    for n in 0..8 {
        let mut sum = 0.;
        for k in 0..8 {
            let s = if k == 0 { SQRT2_O2 } else { 1. };
            sum = f64::mul_add(s, m_in[k] * cos_table(n, k), sum)
        }
        m_out[n] = sum * 0.5;
    }
}

pub fn idct(m_in: &[f64; 64], m_out: &mut [f64; 64]) {
    unsafe {
        let mut transposed = [0.; 64];
        transpose8x8(m_in, &mut transposed);

        for i in 0..8 {
            idct_1d(
                cast(&transposed[8 * i..][..8]),
                cast_mut(&mut m_out[8 * i..][..8]),
            );
        }

        transpose8x8(m_out, &mut transposed);

        for i in 0..8 {
            idct_1d(
                cast(&transposed[8 * i..][..8]),
                cast_mut(&mut m_out[8 * i..][..8]),
            );
        }
    }
}
